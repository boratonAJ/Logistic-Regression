packrat::init()
install.packages("caret")
library("caret", lib.loc="~/Logistics_Regression/packrat/lib/x86_64-apple-darwin13.4.0/3.3.2")
library(devtools)
install.packages("devtools")
installed.packages(travis)
installed.packages('travis)
k
install.packages("yaml")
library("yaml", lib.loc="~/Logistics_Regression/packrat/lib/x86_64-apple-darwin13.4.0/3.3.2")
library(DBI)
install.packages("obi")
install.packages("DBI")
library("PASWR")
library(PASWR)
library("RSQLite")
install.packages("RSQLite")
packrat::restore(prompt = FALSE)
library(PASWR)
library("DBI", lib.loc="~/Logistics_Regression/packrat/lib/x86_64-apple-darwin13.4.0/3.3.2")
dbWriteTable(titanicdb, "titanic", titanic3, overwrite=TRUE)
titanicdb<-dbConnect(SQLite(),dbname="../data-raw/titanic.sqlite")
library("RSQLite", lib.loc="~/Logistics_Regression/packrat/lib/x86_64-apple-darwin13.4.0/3.3.2")
titanicdb<-dbConnect(SQLite(),dbname="../data-raw/titanic.sqlite")
titanicdb<-dbConnect(SQLite(),dbname="../data-raw/titanic.sqlite")
library("DBI")
library("RSQLite")
titanicdb<-dbConnect(SQLite(),dbname="../data-raw/titanic.sqlite")
install.packages("PASWR")
titanicdb<-dbConnect(SQLite(),dbname="../data-raw/titanic.sqlite")
library(PASWR)
dbWriteTable(titanicdb, "titanic", titanic3, overwrite=TRUE)
detach("package:e1071", unload=TRUE)
library("e1071", lib.loc="~/Logistics_Regression/packrat/lib/x86_64-apple-darwin13.4.0/3.3.2")
install.packages("e1071")
install.packages("MASS")
install.packages("lattice")
library(PASWR)
dbWriteTable(titanicdb, "titanic", titanic3, overwrite=TRUE)
titanicdb<-dbConnect(SQLite(),dbname="../data-raw/titanic.sqlite")
library(PASWR)
library("DBI")
library("RSQLite")
library(PASWR)
titanicdb<-dbConnect(SQLite(),dbname="../data-raw/titanic.sqlite")
titanicdb<-dbConnect(SQLite(),dbname="../data-raw/titanic.sqlite")
library("DBI")
library("RSQLite")
library(PASWR)
titanicdb<-dbConnect(SQLite(),dbname="../data-raw/titanic.sqlite")
setwd("~/Logistics_Regression/data-raw")
titanicdb<-dbConnect(SQLite(),dbname="../data-raw/titanic.sqlite")
library(PASWR)
library(PASWR)
dbWriteTable(titanicdb, "titanic", titanic3, overwrite=TRUE)
library(knitr)
library(DBI)
read_chunk("../data-raw/get_data.R")
titanic_all<-dbReadTable(titanicdb, "titanic")
knitr::kable(head(titanic_all))
knitr::kable(summary(titanic_all))
cache_file<-"../data-raw/rawdatacache.Rdata"
if(!file.exists(cache_file)) {
titanic_cache<-titanic_all
save(titanic_cache,file = cache_file)
rm(titanic_cache)
}
load(cache_file)
if(!identical(titanic_all, titanic_cache)) stop("Hey, the data has changed, you should check that out!")
setwd("~/Logistics_Regression/analysis")
library(knitr)
library(DBI)
read_chunk("../data-raw/get_data.R")
titanic_all<-dbReadTable(titanicdb, "titanic")
knitr::kable(head(titanic_all))
knitr::kable(summary(titanic_all))
cache_file<-"../data-raw/rawdatacache.Rdata"
if(!file.exists(cache_file)) {
titanic_cache<-titanic_all
save(titanic_cache,file = cache_file)
rm(titanic_cache)
}
load(cache_file)
if(!identical(titanic_all, titanic_cache)) stop("Hey, the data has changed, you should check that out!")
knitr::kable(summary(titanic_all))
knitr::kable(summary(titanic_all))
library(knitr)
library(DBI)
read_chunk("../data-raw/get_data.R")
titanic_all<-dbReadTable(titanicdb, "titanic")
knitr::kable(head(titanic_all))
knitr::kable(summary(titanic_all))
cache_file<-"../data-raw/rawdatacache.Rdata"
if(!file.exists(cache_file)) {
titanic_cache<-titanic_all
save(titanic_cache,file = cache_file)
rm(titanic_cache)
}
load(cache_file)
if(!identical(titanic_all, titanic_cache)) stop("Hey, the data has changed, you should check that out!")
library(knitr)
library(DBI)
read_chunk("../data-raw/get_data.R")
titanic_all<-dbReadTable(titanicdb, "titanic")
knitr::kable(head(titanic_all))
knitr::kable(summary(titanic_all))
cache_file<-"../data-raw/rawdatacache.Rdata"
if(!file.exists(cache_file)) {
titanic_cache<-titanic_all
save(titanic_cache,file = cache_file)
rm(titanic_cache)
}
load(cache_file)
if(!identical(titanic_all, titanic_cache)) stop("Hey, the data has changed, you should check that out!")
install.packages("latex2exp")
install.packages("pdflatex")
install.packages("pandocfilters")
n_titanic_all<-nrow(titanic_all)
prop_train<-0.7
n_train<-floor(prop_train * n_titanic_all)
# Sample RowIDs
rows_train_s<-sample.int(n_titanic_all, n_train)
titanic_train_s<-titanic_all[rows_train_s,]
titanic_test_s<-titanic_all[-rows_train_s,]
pval<-t.test(titanic_train_s$survived, titanic_test_s$survived, conf.level = .95)$p.value
pval
t.test(titanic_train_s$survived, titanic_test_s$survived, conf.level = .95)$p.value >= .05
pass_ttest<-function(x, prop_train = .07){
n_x_all<-length(x)
n_train<-floor(prop_train * n_x_all)
# Sample RowIDs
rows_train<-sample.int(n_x_all, n_train)
t.test(x[rows_train], x[-rows_train], conf.level = .95)$p.value >= .05
}
sum(replicate(1000,pass_ttest(titanic_all$survived)))/1000
pass_ttest<-function(x, prop_train = .07){
set.seed(6767)
n_x_all<-length(x)
n_train<-floor(prop_train * n_x_all)
# Sample RowIDs
rows_train<-sample.int(n_x_all, n_train)
t.test(x[rows_train], x[-rows_train], conf.level = .95)$p.value >= .05
}
sum(replicate(1000,pass_ttest(titanic_all$survived)))/1000
library(caret)
rows_train_c<-createDataPartition(titanic_all$survived, p = prop_train, list=FALSE)
titanic_train_c<-titanic_all[rows_train_c,]
titanic_test_c<-titanic_all[-rows_train_c,]
pass_ttest<-function(x, prop_train = .07){
# Sample RowIDs
rows_train<-caret::createDataPartition(x, p=prop_train, list=FALSE)
t.test(x[rows_train], x[-rows_train], conf.level = .95)$p.value >= .05
}
sum(replicate(1000,pass_ttest(titanic_all$survived)))/1000
library(caret)
set.seed(8787)
rows_train_c<-createDataPartition(titanic_all$survived, p = prop_train, list=FALSE)
titanic_train_c<-titanic_all[rows_train_c,]
titanic_test_c<-titanic_all[-rows_train_c,]
cache_file<-"../data-processed/sampleIDs.Rdata"
if(!file.exists(cache_file)){
sample_cache<- rows_train_c
save(sample_cache,file=cache_file)
rm(sample_cache)
}
n_titanic_all<-nrow(titanic_all)
prop_train<-0.7
n_train<-floor(prop_train * n_titanic_all)
# Sample RowIDs
rows_train_s<-sample.int(n_titanic_all, n_train)
titanic_train_s<-titanic_all[rows_train_s,]
titanic_test_s<-titanic_all[-rows_train_s,]
pval<-t.test(titanic_train_s$survived, titanic_test_s$survived, conf.level = .95)$p.value
pval
t.test(titanic_train_s$survived, titanic_test_s$survived, conf.level = .95)$p.value >= .05
pass_ttest<-function(x, prop_train = .07){
n_x_all<-length(x)
n_train<-floor(prop_train * n_x_all)
# Sample RowIDs
rows_train<-sample.int(n_x_all, n_train)
t.test(x[rows_train], x[-rows_train], conf.level = .95)$p.value >= .05
}
sum(replicate(1000,pass_ttest(titanic_all$survived)))/1000
pass_ttest<-function(x, prop_train = .07){
set.seed(6767)
n_x_all<-length(x)
n_train<-floor(prop_train * n_x_all)
# Sample RowIDs
rows_train<-sample.int(n_x_all, n_train)
t.test(x[rows_train], x[-rows_train], conf.level = .95)$p.value >= .05
}
sum(replicate(1000,pass_ttest(titanic_all$survived)))/1000
library(caret)
rows_train_c<-createDataPartition(titanic_all$survived, p = prop_train, list=FALSE)
titanic_train_c<-titanic_all[rows_train_c,]
titanic_test_c<-titanic_all[-rows_train_c,]
pass_ttest<-function(x, prop_train = .07){
# Sample RowIDs
rows_train<-caret::createDataPartition(x, p=prop_train, list=FALSE)
t.test(x[rows_train], x[-rows_train], conf.level = .95)$p.value >= .05
}
sum(replicate(1000,pass_ttest(titanic_all$survived)))/1000
library(caret)
set.seed(8787)
rows_train_c<-createDataPartition(titanic_all$survived, p = prop_train, list=FALSE)
titanic_train_c<-titanic_all[rows_train_c,]
titanic_test_c<-titanic_all[-rows_train_c,]
cache_file<-"../data-processed/sampleIDs.Rdata"
if(!file.exists(cache_file)){
sample_cache<- rows_train_c
save(sample_cache,file=cache_file)
rm(sample_cache)
}
load(cache_file)
if(!identical(rows_train_c, sample_cache)) stop("Hey, the sample has changed, you should check that out!")
library("knitr", lib.loc="~/Logistics_Regression/packrat/lib/x86_64-apple-darwin13.4.0/3.3.2")
library("lattice", lib.loc="~/Logistics_Regression/packrat/lib-R")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Logistics_Regression/outputs")
setwd("~/Logistics_Regression/analysis")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
ncol(titanic_all)
caret::nearZeroVar(titanic_all)
colname(titanic_all)
pairs(titanic_all)
savehistory("~/Logistics_Regression/analysis/history_Command.Rhistory")
